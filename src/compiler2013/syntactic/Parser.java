
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 25 02:43:12 CST 2013
//----------------------------------------------------

package compiler2013.syntactic;

import java.io.InputStream;
import compiler2013.absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 25 02:43:12 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\002" +
    "\000\002\004\004\000\002\005\003\000\002\005\003\000" +
    "\002\057\002\000\002\006\007\000\002\007\004\000\002" +
    "\007\005\000\002\010\007\000\002\010\010\000\002\010" +
    "\012\000\002\011\003\000\002\011\005\000\002\012\003" +
    "\000\002\012\005\000\002\013\003\000\002\013\005\000" +
    "\002\014\003\000\002\014\005\000\002\015\003\000\002" +
    "\015\005\000\002\016\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\004\000\002\017\004\000\002\017\007\000" +
    "\002\017\007\000\002\017\006\000\002\017\006\000\002" +
    "\020\005\000\002\020\006\000\002\021\004\000\002\022" +
    "\006\000\002\022\010\000\002\022\005\000\002\022\003" +
    "\000\002\022\004\000\002\023\005\000\002\023\006\000" +
    "\002\024\003\000\002\024\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\002\000\002\026\004\000\002\027\003" +
    "\000\002\027\004\000\002\060\002\000\002\030\007\000" +
    "\002\031\007\000\002\031\011\000\002\032\007\000\002" +
    "\032\010\000\002\032\011\000\002\032\011\000\002\032" +
    "\011\000\002\032\012\000\002\032\012\000\002\032\012" +
    "\000\002\032\013\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\005\000\002\034\003\000\002" +
    "\034\005\000\002\035\003\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\036\003\000\002\037\003\000\002\037\005\000\002\040" +
    "\003\000\002\040\005\000\002\041\003\000\002\041\005" +
    "\000\002\042\003\000\002\042\005\000\002\043\003\000" +
    "\002\043\005\000\002\044\003\000\002\044\005\000\002" +
    "\044\005\000\002\045\003\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\046\003" +
    "\000\002\046\005\000\002\046\005\000\002\047\003\000" +
    "\002\047\005\000\002\047\005\000\002\050\003\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\051" +
    "\003\000\002\051\006\000\002\055\004\000\002\055\003" +
    "\000\002\052\003\000\002\052\004\000\002\052\004\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\006\000\002\053\004\000\002\053\004" +
    "\000\002\053\005\000\002\053\005\000\002\053\006\000" +
    "\002\053\006\000\002\053\003\000\002\056\002\000\002" +
    "\056\003\000\002\056\005\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\022\002\000\004\012\005\011\006\021\007" +
    "\005\010\010\011\006\100\015\001\002\000\100\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\024\ufffa\025\ufffa\031\ufffa\043\ufffa\046\ufffa\047" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\072\ufffa\073\ufffa\076\ufffa" +
    "\077\ufffa\100\ufffa\101\ufffa\102\ufffa\001\002\000\012\023" +
    "\uffe3\031\uffe3\067\uffe3\077\uffe3\001\002\000\006\024\u0119" +
    "\077\u0118\001\002\000\010\031\271\067\030\077\025\001" +
    "\002\000\006\024\256\077\255\001\002\000\012\023\uffe5" +
    "\031\uffe5\067\uffe5\077\uffe5\001\002\000\016\005\011\006" +
    "\021\007\005\010\010\011\006\100\015\001\002\000\100" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\024\ufff9\025\ufff9\031\ufff9\043\ufff9\046" +
    "\ufff9\047\ufff9\065\ufff9\066\ufff9\067\ufff9\072\ufff9\073\ufff9" +
    "\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\001\002\000" +
    "\022\002\000\004\012\005\011\006\021\007\005\010\010" +
    "\011\006\100\015\001\002\000\012\023\uffe2\031\uffe2\067" +
    "\uffe2\077\uffe2\001\002\000\022\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\100\ufffe\001\002\000" +
    "\004\002\022\001\002\000\022\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\100\ufffd\001\002\000" +
    "\012\023\uffe4\031\uffe4\067\uffe4\077\uffe4\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffff\001\002\000\006\067" +
    "\030\077\025\001\002\000\016\022\uffd1\023\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\052\uffd1\001\002\000\016\022\041\023" +
    "\uffd5\026\040\030\uffd5\031\uffd5\052\uffd5\001\002\000\006" +
    "\030\035\031\uffef\001\002\000\006\067\030\077\025\001" +
    "\002\000\004\031\ufff8\001\002\000\004\031\033\001\002" +
    "\000\100\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7\031\ufff7\043" +
    "\ufff7\046\ufff7\047\ufff7\065\ufff7\066\ufff7\067\ufff7\072\ufff7" +
    "\073\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\001" +
    "\002\000\016\022\uffd0\023\uffd0\026\uffd0\030\uffd0\031\uffd0" +
    "\052\uffd0\001\002\000\006\067\030\077\025\001\002\000" +
    "\004\031\uffee\001\002\000\012\023\uffd4\030\uffd4\031\uffd4" +
    "\052\uffd4\001\002\000\036\021\060\022\067\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\020\005" +
    "\011\006\021\007\005\010\010\011\006\023\044\100\015" +
    "\001\002\000\006\067\030\077\025\001\002\000\006\023" +
    "\ufff1\030\ufff1\001\002\000\012\023\uffd6\030\uffd6\031\uffd6" +
    "\052\uffd6\001\002\000\006\023\046\030\047\001\002\000" +
    "\012\023\uffd8\030\uffd8\031\uffd8\052\uffd8\001\002\000\020" +
    "\005\011\006\021\007\005\010\010\011\006\051\051\100" +
    "\015\001\002\000\006\023\ufff0\030\ufff0\001\002\000\004" +
    "\023\052\001\002\000\012\023\uffd7\030\uffd7\031\uffd7\052" +
    "\uffd7\001\002\000\006\023\uffd9\030\uffd9\001\002\000\036" +
    "\021\060\022\067\043\065\046\074\047\100\065\062\066" +
    "\101\067\054\072\102\073\056\076\072\077\070\101\075" +
    "\102\076\001\002\000\060\023\uff91\025\uff91\027\uff91\030" +
    "\uff91\031\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\044\uff91\045\uff91\065\uff91\066" +
    "\uff91\067\207\070\206\071\205\073\uff91\074\uff91\075\uff91" +
    "\001\002\000\036\021\060\022\067\043\065\046\074\047" +
    "\100\065\062\066\101\067\054\072\102\073\056\076\072" +
    "\077\070\101\075\102\076\001\002\000\026\023\uffa0\025" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\073\165" +
    "\074\uffa0\075\uffa0\001\002\000\036\021\060\022\250\043" +
    "\065\046\074\047\100\065\062\066\101\067\054\072\102" +
    "\073\056\076\072\077\070\101\075\102\076\001\002\000" +
    "\022\023\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4" +
    "\034\uffa4\074\161\001\002\000\036\021\060\022\067\043" +
    "\065\046\074\047\100\065\062\066\101\067\054\072\102" +
    "\073\056\076\072\077\070\101\075\102\076\001\002\000" +
    "\042\023\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\174\040\175\041\172\042" +
    "\173\073\uff9c\074\uff9c\075\uff9c\001\002\000\032\023\uff9e" +
    "\025\uff9e\027\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035" +
    "\167\036\170\073\uff9e\074\uff9e\075\uff9e\001\002\000\036" +
    "\021\060\022\067\043\065\046\074\047\100\065\062\066" +
    "\101\067\054\072\102\073\056\076\072\077\070\101\075" +
    "\102\076\001\002\000\024\023\uffa2\025\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\033\uffa2\034\uffa2\074\uffa2\075\163\001\002" +
    "\000\052\005\011\006\021\007\005\010\010\011\006\021" +
    "\060\022\067\043\065\046\074\047\100\065\062\066\101" +
    "\067\054\072\102\073\056\076\072\077\070\100\015\101" +
    "\075\102\076\001\002\000\122\022\uff71\023\uff71\025\uff71" +
    "\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034" +
    "\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71" +
    "\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\052\uff71\053" +
    "\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71" +
    "\062\uff71\063\uff71\064\uff71\065\uff71\066\uff71\067\uff71\070" +
    "\uff71\071\uff71\073\uff71\074\uff71\075\uff71\001\002\000\020" +
    "\023\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\033\157\034" +
    "\uffa6\001\002\000\122\022\uff70\023\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035" +
    "\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70\044\uff70" +
    "\045\uff70\046\uff70\047\uff70\050\uff70\052\uff70\053\uff70\054" +
    "\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061\uff70\062\uff70" +
    "\063\uff70\064\uff70\065\uff70\066\uff70\067\uff70\070\uff70\071" +
    "\uff70\073\uff70\074\uff70\075\uff70\001\002\000\006\027\uffa7" +
    "\034\155\001\002\000\036\021\060\022\234\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\122\022" +
    "\uff6f\023\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040" +
    "\uff6f\041\uff6f\042\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f" +
    "\050\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057" +
    "\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f" +
    "\066\uff6f\067\uff6f\070\uff6f\071\uff6f\073\uff6f\074\uff6f\075" +
    "\uff6f\001\002\000\122\022\uff6e\023\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035" +
    "\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\044\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\050\uff6e\052\uff6e\053\uff6e\054" +
    "\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e" +
    "\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\071" +
    "\uff6e\073\uff6e\074\uff6e\075\uff6e\001\002\000\046\023\uff99" +
    "\025\uff99\027\uff99\030\uff99\031\uff99\033\uff99\034\uff99\035" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\044\200" +
    "\045\177\073\uff99\074\uff99\075\uff99\001\002\000\036\021" +
    "\060\022\234\043\065\046\074\047\100\065\062\066\101" +
    "\067\054\072\102\073\056\076\072\077\070\101\075\102" +
    "\076\001\002\000\036\021\060\022\067\043\065\046\074" +
    "\047\100\065\062\066\101\067\054\072\102\073\056\076" +
    "\072\077\070\101\075\102\076\001\002\000\036\021\060" +
    "\022\067\043\065\046\074\047\100\065\062\066\101\067" +
    "\054\072\102\073\056\076\072\077\070\101\075\102\076" +
    "\001\002\000\106\023\uff8a\025\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\044\uff8a\045\uff8a\052\uff8a\053\uff8a\054" +
    "\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\073\uff8a\074\uff8a\075\uff8a\001\002\000\004\027\227" +
    "\001\002\000\052\023\uff94\025\uff94\027\uff94\030\uff94\031" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\044\uff94\045\uff94\065\202\066\203\073" +
    "\uff94\074\uff94\075\uff94\001\002\000\122\022\uff75\023\uff75" +
    "\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033" +
    "\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75" +
    "\042\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\052" +
    "\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75" +
    "\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067" +
    "\uff75\070\uff75\071\uff75\073\uff75\074\uff75\075\uff75\001\002" +
    "\000\122\022\115\023\uff86\025\uff86\026\111\027\uff86\030" +
    "\uff86\031\uff86\032\116\033\uff86\034\uff86\035\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\044\uff86\045\uff86\046" +
    "\112\047\113\050\114\052\uff86\053\uff86\054\uff86\055\uff86" +
    "\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064" +
    "\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\073\uff86" +
    "\074\uff86\075\uff86\001\002\000\060\023\uff8e\025\uff8e\027" +
    "\uff8e\030\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\044\uff8e\045\uff8e\065" +
    "\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\073\uff8e\074\uff8e" +
    "\075\uff8e\001\002\000\036\021\060\022\067\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\122\022" +
    "\uff7b\023\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\050\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057" +
    "\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b" +
    "\066\uff7b\067\uff7b\070\uff7b\071\uff7b\073\uff7b\074\uff7b\075" +
    "\uff7b\001\002\000\122\022\uff7a\023\uff7a\025\uff7a\026\uff7a" +
    "\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\047\uff7a\050\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a" +
    "\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071" +
    "\uff7a\073\uff7a\074\uff7a\075\uff7a\001\002\000\004\077\221" +
    "\001\002\000\040\021\060\022\067\023\uff74\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\004\077" +
    "\117\001\002\000\122\022\uff79\023\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\044\uff79" +
    "\045\uff79\046\uff79\047\uff79\050\uff79\052\uff79\053\uff79\054" +
    "\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79" +
    "\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071" +
    "\uff79\073\uff79\074\uff79\075\uff79\001\002\000\016\023\uffb3" +
    "\025\uffb3\027\uffb3\030\uffb3\031\uffb3\034\155\001\002\000" +
    "\106\023\uff8a\025\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042" +
    "\uff8a\044\uff8a\045\uff8a\052\135\053\132\054\131\055\130" +
    "\056\133\057\137\060\141\061\140\062\134\063\136\064" +
    "\127\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\073\uff8a" +
    "\074\uff8a\075\uff8a\001\002\000\006\023\uff73\030\125\001" +
    "\002\000\004\023\124\001\002\000\122\022\uff76\023\uff76" +
    "\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033" +
    "\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76" +
    "\042\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\052" +
    "\uff76\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76" +
    "\061\uff76\062\uff76\063\uff76\064\uff76\065\uff76\066\uff76\067" +
    "\uff76\070\uff76\071\uff76\073\uff76\074\uff76\075\uff76\001\002" +
    "\000\040\021\060\022\067\023\uff74\043\065\046\074\047" +
    "\100\065\062\066\101\067\054\072\102\073\056\076\072" +
    "\077\070\101\075\102\076\001\002\000\004\023\uff72\001" +
    "\002\000\036\021\060\022\067\043\065\046\074\047\100" +
    "\065\062\066\101\067\054\072\102\073\056\076\072\077" +
    "\070\101\075\102\076\001\002\000\036\021\060\022\067" +
    "\043\065\046\074\047\100\065\062\066\101\067\054\072" +
    "\102\073\056\076\072\077\070\101\075\102\076\001\002" +
    "\000\036\021\060\022\067\043\065\046\074\047\100\065" +
    "\062\066\101\067\054\072\102\073\056\076\072\077\070" +
    "\101\075\102\076\001\002\000\036\021\060\022\067\043" +
    "\065\046\074\047\100\065\062\066\101\067\054\072\102" +
    "\073\056\076\072\077\070\101\075\102\076\001\002\000" +
    "\036\021\060\022\067\043\065\046\074\047\100\065\062" +
    "\066\101\067\054\072\102\073\056\076\072\077\070\101" +
    "\075\102\076\001\002\000\036\021\060\022\067\043\065" +
    "\046\074\047\100\065\062\066\101\067\054\072\102\073" +
    "\056\076\072\077\070\101\075\102\076\001\002\000\036" +
    "\021\060\022\067\043\065\046\074\047\100\065\062\066" +
    "\101\067\054\072\102\073\056\076\072\077\070\101\075" +
    "\102\076\001\002\000\036\021\060\022\067\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\036\021" +
    "\060\022\067\043\065\046\074\047\100\065\062\066\101" +
    "\067\054\072\102\073\056\076\072\077\070\101\075\102" +
    "\076\001\002\000\036\021\060\022\067\043\065\046\074" +
    "\047\100\065\062\066\101\067\054\072\102\073\056\076" +
    "\072\077\070\101\075\102\076\001\002\000\036\021\060" +
    "\022\067\043\065\046\074\047\100\065\062\066\101\067" +
    "\054\072\102\073\056\076\072\077\070\101\075\102\076" +
    "\001\002\000\014\023\uffac\025\uffac\027\uffac\030\uffac\031" +
    "\uffac\001\002\000\014\023\uffab\025\uffab\027\uffab\030\uffab" +
    "\031\uffab\001\002\000\014\023\uffaf\025\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\001\002\000\014\023\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\001\002\000\014\023\uffb2\025\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\001\002\000\014\023\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\001\002\000\014\023\uffb0\025" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\001\002\000\014\023\uffae" +
    "\025\uffae\027\uffae\030\uffae\031\uffae\001\002\000\014\023" +
    "\uffad\025\uffad\027\uffad\030\uffad\031\uffad\001\002\000\014" +
    "\023\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\001\002\000" +
    "\014\023\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\001\002" +
    "\000\036\021\060\022\067\043\065\046\074\047\100\065" +
    "\062\066\101\067\054\072\102\073\056\076\072\077\070" +
    "\101\075\102\076\001\002\000\020\023\uffa5\025\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\033\157\034\uffa5\001\002\000\036" +
    "\021\060\022\067\043\065\046\074\047\100\065\062\066" +
    "\101\067\054\072\102\073\056\076\072\077\070\101\075" +
    "\102\076\001\002\000\022\023\uffa3\025\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\033\uffa3\034\uffa3\074\161\001\002\000\036" +
    "\021\060\022\067\043\065\046\074\047\100\065\062\066" +
    "\101\067\054\072\102\073\056\076\072\077\070\101\075" +
    "\102\076\001\002\000\024\023\uffa1\025\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\033\uffa1\034\uffa1\074\uffa1\075\163\001\002" +
    "\000\036\021\060\022\067\043\065\046\074\047\100\065" +
    "\062\066\101\067\054\072\102\073\056\076\072\077\070" +
    "\101\075\102\076\001\002\000\026\023\uff9f\025\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\033\uff9f\034\uff9f\073\165\074\uff9f" +
    "\075\uff9f\001\002\000\036\021\060\022\067\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\032\023" +
    "\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d\034\uff9d" +
    "\035\167\036\170\073\uff9d\074\uff9d\075\uff9d\001\002\000" +
    "\036\021\060\022\067\043\065\046\074\047\100\065\062" +
    "\066\101\067\054\072\102\073\056\076\072\077\070\101" +
    "\075\102\076\001\002\000\036\021\060\022\067\043\065" +
    "\046\074\047\100\065\062\066\101\067\054\072\102\073" +
    "\056\076\072\077\070\101\075\102\076\001\002\000\042" +
    "\023\uff9a\025\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\174\040\175\041\172\042\173" +
    "\073\uff9a\074\uff9a\075\uff9a\001\002\000\036\021\060\022" +
    "\067\043\065\046\074\047\100\065\062\066\101\067\054" +
    "\072\102\073\056\076\072\077\070\101\075\102\076\001" +
    "\002\000\036\021\060\022\067\043\065\046\074\047\100" +
    "\065\062\066\101\067\054\072\102\073\056\076\072\077" +
    "\070\101\075\102\076\001\002\000\036\021\060\022\067" +
    "\043\065\046\074\047\100\065\062\066\101\067\054\072" +
    "\102\073\056\076\072\077\070\101\075\102\076\001\002" +
    "\000\036\021\060\022\067\043\065\046\074\047\100\065" +
    "\062\066\101\067\054\072\102\073\056\076\072\077\070" +
    "\101\075\102\076\001\002\000\046\023\uff95\025\uff95\027" +
    "\uff95\030\uff95\031\uff95\033\uff95\034\uff95\035\uff95\036\uff95" +
    "\037\uff95\040\uff95\041\uff95\042\uff95\044\200\045\177\073" +
    "\uff95\074\uff95\075\uff95\001\002\000\036\021\060\022\067" +
    "\043\065\046\074\047\100\065\062\066\101\067\054\072" +
    "\102\073\056\076\072\077\070\101\075\102\076\001\002" +
    "\000\036\021\060\022\067\043\065\046\074\047\100\065" +
    "\062\066\101\067\054\072\102\073\056\076\072\077\070" +
    "\101\075\102\076\001\002\000\052\023\uff93\025\uff93\027" +
    "\uff93\030\uff93\031\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\044\uff93\045\uff93\065" +
    "\202\066\203\073\uff93\074\uff93\075\uff93\001\002\000\036" +
    "\021\060\022\067\043\065\046\074\047\100\065\062\066" +
    "\101\067\054\072\102\073\056\076\072\077\070\101\075" +
    "\102\076\001\002\000\036\021\060\022\067\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\060\023" +
    "\uff8f\025\uff8f\027\uff8f\030\uff8f\031\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\044" +
    "\uff8f\045\uff8f\065\uff8f\066\uff8f\067\207\070\206\071\205" +
    "\073\uff8f\074\uff8f\075\uff8f\001\002\000\036\021\060\022" +
    "\067\043\065\046\074\047\100\065\062\066\101\067\054" +
    "\072\102\073\056\076\072\077\070\101\075\102\076\001" +
    "\002\000\036\021\060\022\067\043\065\046\074\047\100" +
    "\065\062\066\101\067\054\072\102\073\056\076\072\077" +
    "\070\101\075\102\076\001\002\000\036\021\060\022\067" +
    "\043\065\046\074\047\100\065\062\066\101\067\054\072" +
    "\102\073\056\076\072\077\070\101\075\102\076\001\002" +
    "\000\060\023\uff8d\025\uff8d\027\uff8d\030\uff8d\031\uff8d\033" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\044\uff8d\045\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\071\uff8d\073\uff8d\074\uff8d\075\uff8d\001\002\000\060" +
    "\023\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\044\uff8c\045\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071" +
    "\uff8c\073\uff8c\074\uff8c\075\uff8c\001\002\000\060\023\uff8b" +
    "\025\uff8b\027\uff8b\030\uff8b\031\uff8b\033\uff8b\034\uff8b\035" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\044\uff8b" +
    "\045\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\073" +
    "\uff8b\074\uff8b\075\uff8b\001\002\000\060\023\uff90\025\uff90" +
    "\027\uff90\030\uff90\031\uff90\033\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\044\uff90\045\uff90" +
    "\065\uff90\066\uff90\067\207\070\206\071\205\073\uff90\074" +
    "\uff90\075\uff90\001\002\000\052\023\uff92\025\uff92\027\uff92" +
    "\030\uff92\031\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\044\uff92\045\uff92\065\202" +
    "\066\203\073\uff92\074\uff92\075\uff92\001\002\000\046\023" +
    "\uff96\025\uff96\027\uff96\030\uff96\031\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\044" +
    "\200\045\177\073\uff96\074\uff96\075\uff96\001\002\000\046" +
    "\023\uff97\025\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\044\200\045\177\073\uff97\074\uff97\075\uff97\001\002\000" +
    "\046\023\uff98\025\uff98\027\uff98\030\uff98\031\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\044\200\045\177\073\uff98\074\uff98\075\uff98\001\002" +
    "\000\042\023\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\174\040\175\041\172" +
    "\042\173\073\uff9b\074\uff9b\075\uff9b\001\002\000\122\022" +
    "\uff78\023\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78" +
    "\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040" +
    "\uff78\041\uff78\042\uff78\044\uff78\045\uff78\046\uff78\047\uff78" +
    "\050\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057" +
    "\uff78\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78" +
    "\066\uff78\067\uff78\070\uff78\071\uff78\073\uff78\074\uff78\075" +
    "\uff78\001\002\000\004\027\226\001\002\000\012\023\uffb5" +
    "\027\uffb5\030\224\031\uffb5\001\002\000\036\021\060\022" +
    "\067\043\065\046\074\047\100\065\062\066\101\067\054" +
    "\072\102\073\056\076\072\077\070\101\075\102\076\001" +
    "\002\000\010\023\uffb4\027\uffb4\031\uffb4\001\002\000\122" +
    "\022\uff77\023\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031" +
    "\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\044\uff77\045\uff77\046\uff77\047" +
    "\uff77\050\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77" +
    "\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77\065" +
    "\uff77\066\uff77\067\uff77\070\uff77\071\uff77\073\uff77\074\uff77" +
    "\075\uff77\001\002\000\014\023\uffd3\026\040\030\uffd3\031" +
    "\uffd3\052\uffd3\001\002\000\012\023\uffd2\030\uffd2\031\uffd2" +
    "\052\uffd2\001\002\000\106\023\uff7f\025\uff7f\027\uff7f\030" +
    "\uff7f\031\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\044\uff7f\045\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070" +
    "\uff7f\071\uff7f\073\uff7f\074\uff7f\075\uff7f\001\002\000\106" +
    "\023\uff80\025\uff80\027\uff80\030\uff80\031\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\044\uff80\045\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056" +
    "\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80" +
    "\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\073\uff80\074" +
    "\uff80\075\uff80\001\002\000\106\023\uff84\025\uff84\027\uff84" +
    "\030\uff84\031\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\044\uff84\045\uff84\052\uff84" +
    "\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061" +
    "\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84" +
    "\070\uff84\071\uff84\073\uff84\074\uff84\075\uff84\001\002\000" +
    "\036\021\060\022\067\043\065\046\074\047\100\065\062" +
    "\066\101\067\054\072\102\073\056\076\072\077\070\101" +
    "\075\102\076\001\002\000\004\023\236\001\002\000\122" +
    "\022\uff6d\023\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\044\uff6d\045\uff6d\046\uff6d\047" +
    "\uff6d\050\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d" +
    "\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\065" +
    "\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\073\uff6d\074\uff6d" +
    "\075\uff6d\001\002\000\106\023\uff85\025\uff85\027\uff85\030" +
    "\uff85\031\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\042\uff85\044\uff85\045\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85" +
    "\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070" +
    "\uff85\071\uff85\073\uff85\074\uff85\075\uff85\001\002\000\006" +
    "\023\uff87\067\uff87\001\002\000\006\023\242\067\243\001" +
    "\002\000\036\021\060\022\067\043\065\046\074\047\100" +
    "\065\062\066\101\067\054\072\102\073\056\076\072\077" +
    "\070\101\075\102\076\001\002\000\006\023\uff88\067\uff88" +
    "\001\002\000\106\023\uff89\025\uff89\027\uff89\030\uff89\031" +
    "\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\044\uff89\045\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89" +
    "\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071" +
    "\uff89\073\uff89\074\uff89\075\uff89\001\002\000\106\023\uff7e" +
    "\025\uff7e\027\uff7e\030\uff7e\031\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\044\uff7e" +
    "\045\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e" +
    "\066\uff7e\067\uff7e\070\uff7e\071\uff7e\073\uff7e\074\uff7e\075" +
    "\uff7e\001\002\000\106\023\uff81\025\uff81\027\uff81\030\uff81" +
    "\031\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\044\uff81\045\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062" +
    "\uff81\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81" +
    "\071\uff81\073\uff81\074\uff81\075\uff81\001\002\000\106\023" +
    "\uff7d\025\uff7d\027\uff7d\030\uff7d\031\uff7d\033\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\044" +
    "\uff7d\045\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d" +
    "\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065" +
    "\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\073\uff7d\074\uff7d" +
    "\075\uff7d\001\002\000\052\005\011\006\021\007\005\010" +
    "\010\011\006\021\060\022\067\043\065\046\074\047\100" +
    "\065\062\066\101\067\054\072\102\073\056\076\072\077" +
    "\070\100\015\101\075\102\076\001\002\000\006\023\252" +
    "\067\243\001\002\000\106\023\uff7c\025\uff7c\027\uff7c\030" +
    "\uff7c\031\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c" +
    "\040\uff7c\041\uff7c\042\uff7c\044\uff7c\045\uff7c\052\uff7c\053" +
    "\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c" +
    "\062\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070" +
    "\uff7c\071\uff7c\073\uff7c\074\uff7c\075\uff7c\001\002\000\106" +
    "\023\uff83\025\uff83\027\uff83\030\uff83\031\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\044\uff83\045\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83" +
    "\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\073\uff83\074" +
    "\uff83\075\uff83\001\002\000\106\023\uff82\025\uff82\027\uff82" +
    "\030\uff82\031\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\042\uff82\044\uff82\045\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061" +
    "\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82" +
    "\070\uff82\071\uff82\073\uff82\074\uff82\075\uff82\001\002\000" +
    "\014\023\uffe1\024\265\031\uffe1\067\uffe1\077\uffe1\001\002" +
    "\000\016\005\011\006\021\007\005\010\010\011\006\100" +
    "\015\001\002\000\006\067\030\077\025\001\002\000\004" +
    "\025\261\001\002\000\012\023\uffdd\031\uffdd\067\uffdd\077" +
    "\uffdd\001\002\000\004\031\263\001\002\000\020\005\011" +
    "\006\021\007\005\010\010\011\006\025\uffdb\100\015\001" +
    "\002\000\004\025\uffda\001\002\000\016\005\011\006\021" +
    "\007\005\010\010\011\006\100\015\001\002\000\004\025" +
    "\267\001\002\000\012\023\uffdf\031\uffdf\067\uffdf\077\uffdf" +
    "\001\002\000\004\031\u0117\001\002\000\100\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\024\ufff6\025\ufff6\031\ufff6\043\ufff6\046\ufff6\047\ufff6" +
    "\065\ufff6\066\ufff6\067\ufff6\072\ufff6\073\ufff6\076\ufff6\077" +
    "\ufff6\100\ufff6\101\ufff6\102\ufff6\001\002\000\006\030\u0115" +
    "\031\uffed\001\002\000\014\022\306\026\040\030\uffd5\031" +
    "\uffd5\052\uffd5\001\002\000\010\030\uffeb\031\uffeb\052\275" +
    "\001\002\000\040\021\060\022\067\024\276\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\040\021" +
    "\060\022\067\024\276\043\065\046\074\047\100\065\062" +
    "\066\101\067\054\072\102\073\056\076\072\077\070\101" +
    "\075\102\076\001\002\000\006\030\uffea\031\uffea\001\002" +
    "\000\010\025\uffe9\030\uffe9\031\uffe9\001\002\000\006\025" +
    "\uffe7\030\304\001\002\000\004\025\303\001\002\000\010" +
    "\025\uffe8\030\uffe8\031\uffe8\001\002\000\040\021\060\022" +
    "\067\024\276\043\065\046\074\047\100\065\062\066\101" +
    "\067\054\072\102\073\056\076\072\077\070\101\075\102" +
    "\076\001\002\000\004\025\uffe6\001\002\000\020\005\011" +
    "\006\021\007\005\010\010\011\006\023\307\100\015\001" +
    "\002\000\012\024\315\030\uffd6\031\uffd6\052\uffd6\001\002" +
    "\000\006\023\311\030\312\001\002\000\012\024\315\030" +
    "\uffd8\031\uffd8\052\uffd8\001\002\000\020\005\011\006\021" +
    "\007\005\010\010\011\006\051\313\100\015\001\002\000" +
    "\004\023\314\001\002\000\012\024\315\030\uffd7\031\uffd7" +
    "\052\uffd7\001\002\000\076\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\031" +
    "\uffc6\043\uffc6\046\uffc6\047\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\072\uffc6\073\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102" +
    "\uffc6\001\002\000\022\002\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\100\ufff2\001\002\000\076\004" +
    "\012\005\011\006\021\007\005\010\010\011\006\012\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\024\ufffc\025\ufffc\031\ufffc\043\ufffc\046\ufffc\047\ufffc" +
    "\065\ufffc\066\ufffc\067\ufffc\072\ufffc\073\ufffc\076\ufffc\077" +
    "\ufffc\100\015\101\ufffc\102\ufffc\001\002\000\010\031\271" +
    "\067\030\077\025\001\002\000\060\012\330\014\335\015" +
    "\325\016\324\017\333\020\332\021\060\022\067\024\315" +
    "\025\uffca\031\326\043\065\046\074\047\100\065\062\066" +
    "\101\067\054\072\102\073\056\076\072\077\070\101\075" +
    "\102\076\001\002\000\076\004\012\005\011\006\021\007" +
    "\005\010\010\011\006\012\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\031" +
    "\ufffc\043\ufffc\046\ufffc\047\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\072\ufffc\073\ufffc\076\ufffc\077\ufffc\100\015\101\ufffc\102" +
    "\ufffc\001\002\000\060\012\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\024\ufffb\025\ufffb\031" +
    "\ufffb\043\ufffb\046\ufffb\047\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\072\ufffb\073\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb\001" +
    "\002\000\004\031\u0112\001\002\000\004\022\364\001\002" +
    "\000\062\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\031\uffc8" +
    "\043\uffc8\046\uffc8\047\uffc8\065\uffc8\066\uffc8\067\uffc8\072" +
    "\uffc8\073\uffc8\076\uffc8\077\uffc8\101\uffc8\102\uffc8\001\002" +
    "\000\062\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc\031\uffcc" +
    "\043\uffcc\046\uffcc\047\uffcc\065\uffcc\066\uffcc\067\uffcc\072" +
    "\uffcc\073\uffcc\076\uffcc\077\uffcc\101\uffcc\102\uffcc\001\002" +
    "\000\004\022\356\001\002\000\004\025\355\001\002\000" +
    "\040\021\060\022\067\031\352\043\065\046\074\047\100" +
    "\065\062\066\101\067\054\072\102\073\056\076\072\077" +
    "\070\101\075\102\076\001\002\000\004\031\351\001\002" +
    "\000\062\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\024\uffce\025\uffce\031\uffce" +
    "\043\uffce\046\uffce\047\uffce\065\uffce\066\uffce\067\uffce\072" +
    "\uffce\073\uffce\076\uffce\077\uffce\101\uffce\102\uffce\001\002" +
    "\000\004\022\345\001\002\000\062\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\024\uffcf\025\uffcf\031\uffcf\043\uffcf\046\uffcf\047\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\072\uffcf\073\uffcf\076\uffcf\077\uffcf" +
    "\101\uffcf\102\uffcf\001\002\000\004\031\344\001\002\000" +
    "\062\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\031\uffcd\043" +
    "\uffcd\046\uffcd\047\uffcd\065\uffcd\066\uffcd\067\uffcd\072\uffcd" +
    "\073\uffcd\076\uffcd\077\uffcd\101\uffcd\102\uffcd\001\002\000" +
    "\062\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\031\uffcb\043" +
    "\uffcb\046\uffcb\047\uffcb\065\uffcb\066\uffcb\067\uffcb\072\uffcb" +
    "\073\uffcb\076\uffcb\077\uffcb\101\uffcb\102\uffcb\001\002\000" +
    "\060\012\330\014\335\015\325\016\324\017\333\020\332" +
    "\021\060\022\067\024\315\025\uffca\031\326\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\004\025" +
    "\uffc9\001\002\000\062\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\025" +
    "\uffc7\031\uffc7\043\uffc7\046\uffc7\047\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\072\uffc7\073\uffc7\076\uffc7\077\uffc7\101\uffc7\102" +
    "\uffc7\001\002\000\036\021\060\022\067\043\065\046\074" +
    "\047\100\065\062\066\101\067\054\072\102\073\056\076" +
    "\072\077\070\101\075\102\076\001\002\000\004\023\347" +
    "\001\002\000\056\012\330\014\335\015\325\016\324\017" +
    "\333\020\332\021\060\022\067\024\315\031\326\043\065" +
    "\046\074\047\100\065\062\066\101\067\054\072\102\073" +
    "\056\076\072\077\070\101\075\102\076\001\002\000\062" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\031\uffc2\043\uffc2" +
    "\046\uffc2\047\uffc2\065\uffc2\066\uffc2\067\uffc2\072\uffc2\073" +
    "\uffc2\076\uffc2\077\uffc2\101\uffc2\102\uffc2\001\002\000\062" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8\031\uffb8\043\uffb8" +
    "\046\uffb8\047\uffb8\065\uffb8\066\uffb8\067\uffb8\072\uffb8\073" +
    "\uffb8\076\uffb8\077\uffb8\101\uffb8\102\uffb8\001\002\000\062" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\024\uffb7\025\uffb7\031\uffb7\043\uffb7" +
    "\046\uffb7\047\uffb7\065\uffb7\066\uffb7\067\uffb7\072\uffb7\073" +
    "\uffb7\076\uffb7\077\uffb7\101\uffb7\102\uffb7\001\002\000\004" +
    "\031\354\001\002\000\062\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6" +
    "\025\uffb6\031\uffb6\043\uffb6\046\uffb6\047\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\072\uffb6\073\uffb6\076\uffb6\077\uffb6\101\uffb6" +
    "\102\uffb6\001\002\000\102\002\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024" +
    "\uffc5\025\uffc5\031\uffc5\043\uffc5\046\uffc5\047\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\072\uffc5\073\uffc5\076\uffc5\077\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\001\002\000\036\021\060\022\067" +
    "\043\065\046\074\047\100\065\062\066\101\067\054\072" +
    "\102\073\056\076\072\077\070\101\075\102\076\001\002" +
    "\000\004\023\360\001\002\000\056\012\330\014\335\015" +
    "\325\016\324\017\333\020\332\021\060\022\067\024\315" +
    "\031\326\043\065\046\074\047\100\065\062\066\101\067" +
    "\054\072\102\073\056\076\072\077\070\101\075\102\076" +
    "\001\002\000\062\012\uffc4\013\362\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4" +
    "\031\uffc4\043\uffc4\046\uffc4\047\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\072\uffc4\073\uffc4\076\uffc4\077\uffc4\101\uffc4\102\uffc4" +
    "\001\002\000\056\012\330\014\335\015\325\016\324\017" +
    "\333\020\332\021\060\022\067\024\315\031\326\043\065" +
    "\046\074\047\100\065\062\066\101\067\054\072\102\073" +
    "\056\076\072\077\070\101\075\102\076\001\002\000\062" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\031\uffc3\043\uffc3" +
    "\046\uffc3\047\uffc3\065\uffc3\066\uffc3\067\uffc3\072\uffc3\073" +
    "\uffc3\076\uffc3\077\uffc3\101\uffc3\102\uffc3\001\002\000\040" +
    "\021\060\022\067\031\365\043\065\046\074\047\100\065" +
    "\062\066\101\067\054\072\102\073\056\076\072\077\070" +
    "\101\075\102\076\001\002\000\040\021\060\022\067\031" +
    "\u0105\043\065\046\074\047\100\065\062\066\101\067\054" +
    "\072\102\073\056\076\072\077\070\101\075\102\076\001" +
    "\002\000\004\031\367\001\002\000\040\021\060\022\067" +
    "\031\370\043\065\046\074\047\100\065\062\066\101\067" +
    "\054\072\102\073\056\076\072\077\070\101\075\102\076" +
    "\001\002\000\040\021\060\022\067\023\u0101\043\065\046" +
    "\074\047\100\065\062\066\101\067\054\072\102\073\056" +
    "\076\072\077\070\101\075\102\076\001\002\000\004\031" +
    "\372\001\002\000\040\021\060\022\067\023\374\043\065" +
    "\046\074\047\100\065\062\066\101\067\054\072\102\073" +
    "\056\076\072\077\070\101\075\102\076\001\002\000\004" +
    "\023\376\001\002\000\056\012\330\014\335\015\325\016" +
    "\324\017\333\020\332\021\060\022\067\024\315\031\326" +
    "\043\065\046\074\047\100\065\062\066\101\067\054\072" +
    "\102\073\056\076\072\077\070\101\075\102\076\001\002" +
    "\000\062\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd\031\uffbd" +
    "\043\uffbd\046\uffbd\047\uffbd\065\uffbd\066\uffbd\067\uffbd\072" +
    "\uffbd\073\uffbd\076\uffbd\077\uffbd\101\uffbd\102\uffbd\001\002" +
    "\000\056\012\330\014\335\015\325\016\324\017\333\020" +
    "\332\021\060\022\067\024\315\031\326\043\065\046\074" +
    "\047\100\065\062\066\101\067\054\072\102\073\056\076" +
    "\072\077\070\101\075\102\076\001\002\000\062\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\024\uffba\025\uffba\031\uffba\043\uffba\046\uffba" +
    "\047\uffba\065\uffba\066\uffba\067\uffba\072\uffba\073\uffba\076" +
    "\uffba\077\uffba\101\uffba\102\uffba\001\002\000\004\023\u0103" +
    "\001\002\000\056\012\330\014\335\015\325\016\324\017" +
    "\333\020\332\021\060\022\067\024\315\031\326\043\065" +
    "\046\074\047\100\065\062\066\101\067\054\072\102\073" +
    "\056\076\072\077\070\101\075\102\076\001\002\000\062" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\031\uffc0\043\uffc0" +
    "\046\uffc0\047\uffc0\065\uffc0\066\uffc0\067\uffc0\072\uffc0\073" +
    "\uffc0\076\uffc0\077\uffc0\101\uffc0\102\uffc0\001\002\000\056" +
    "\012\330\014\335\015\325\016\324\017\333\020\332\021" +
    "\060\022\067\024\315\031\326\043\065\046\074\047\100" +
    "\065\062\066\101\067\054\072\102\073\056\076\072\077" +
    "\070\101\075\102\076\001\002\000\062\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\024\uffbc\025\uffbc\031\uffbc\043\uffbc\046\uffbc\047\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\072\uffbc\073\uffbc\076\uffbc\077" +
    "\uffbc\101\uffbc\102\uffbc\001\002\000\040\021\060\022\067" +
    "\023\u010e\043\065\046\074\047\100\065\062\066\101\067" +
    "\054\072\102\073\056\076\072\077\070\101\075\102\076" +
    "\001\002\000\004\031\u0107\001\002\000\040\021\060\022" +
    "\067\023\u0109\043\065\046\074\047\100\065\062\066\101" +
    "\067\054\072\102\073\056\076\072\077\070\101\075\102" +
    "\076\001\002\000\004\023\u010b\001\002\000\056\012\330" +
    "\014\335\015\325\016\324\017\333\020\332\021\060\022" +
    "\067\024\315\031\326\043\065\046\074\047\100\065\062" +
    "\066\101\067\054\072\102\073\056\076\072\077\070\101" +
    "\075\102\076\001\002\000\062\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024" +
    "\uffbf\025\uffbf\031\uffbf\043\uffbf\046\uffbf\047\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\072\uffbf\073\uffbf\076\uffbf\077\uffbf\101" +
    "\uffbf\102\uffbf\001\002\000\056\012\330\014\335\015\325" +
    "\016\324\017\333\020\332\021\060\022\067\024\315\031" +
    "\326\043\065\046\074\047\100\065\062\066\101\067\054" +
    "\072\102\073\056\076\072\077\070\101\075\102\076\001" +
    "\002\000\062\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\031" +
    "\uffbb\043\uffbb\046\uffbb\047\uffbb\065\uffbb\066\uffbb\067\uffbb" +
    "\072\uffbb\073\uffbb\076\uffbb\077\uffbb\101\uffbb\102\uffbb\001" +
    "\002\000\004\023\u0110\001\002\000\056\012\330\014\335" +
    "\015\325\016\324\017\333\020\332\021\060\022\067\024" +
    "\315\031\326\043\065\046\074\047\100\065\062\066\101" +
    "\067\054\072\102\073\056\076\072\077\070\101\075\102" +
    "\076\001\002\000\062\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\025" +
    "\uffc1\031\uffc1\043\uffc1\046\uffc1\047\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\072\uffc1\073\uffc1\076\uffc1\077\uffc1\101\uffc1\102" +
    "\uffc1\001\002\000\056\012\330\014\335\015\325\016\324" +
    "\017\333\020\332\021\060\022\067\024\315\031\326\043" +
    "\065\046\074\047\100\065\062\066\101\067\054\072\102" +
    "\073\056\076\072\077\070\101\075\102\076\001\002\000" +
    "\062\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\031\uffbe\043" +
    "\uffbe\046\uffbe\047\uffbe\065\uffbe\066\uffbe\067\uffbe\072\uffbe" +
    "\073\uffbe\076\uffbe\077\uffbe\101\uffbe\102\uffbe\001\002\000" +
    "\062\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9\031\uffb9\043" +
    "\uffb9\046\uffb9\047\uffb9\065\uffb9\066\uffb9\067\uffb9\072\uffb9" +
    "\073\uffb9\076\uffb9\077\uffb9\101\uffb9\102\uffb9\001\002\000" +
    "\022\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\100\ufff3\001\002\000\022\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\100\ufff4\001\002" +
    "\000\006\067\030\077\025\001\002\000\004\031\uffec\001" +
    "\002\000\100\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5\025\ufff5\031\ufff5" +
    "\043\ufff5\046\ufff5\047\ufff5\065\ufff5\066\ufff5\067\ufff5\072" +
    "\ufff5\073\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5" +
    "\001\002\000\014\023\uffe0\024\u011c\031\uffe0\067\uffe0\077" +
    "\uffe0\001\002\000\016\005\011\006\021\007\005\010\010" +
    "\011\006\100\015\001\002\000\004\025\u011b\001\002\000" +
    "\012\023\uffdc\031\uffdc\067\uffdc\077\uffdc\001\002\000\016" +
    "\005\011\006\021\007\005\010\010\011\006\100\015\001" +
    "\002\000\004\025\u011e\001\002\000\012\023\uffde\031\uffde" +
    "\067\uffde\077\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\020\002\016\003\013\005\015\006\003\007" +
    "\012\010\017\017\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\267\014\271\022" +
    "\273\024\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\023\001\001\000\002\001\001\000\020\002" +
    "\022\003\013\005\015\006\003\007\012\010\017\017\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\030\022\026\024\025\001" +
    "\001\000\002\001\001\000\004\023\036\001\001\000\002" +
    "\001\001\000\004\024\033\001\001\000\004\057\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\035\022\026\024\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\036\103\037\072\040\070" +
    "\041\060\042\065\043\056\044\063\045\062\046\076\047" +
    "\104\050\054\051\107\052\102\053\106\054\105\001\001" +
    "\000\010\011\044\017\041\021\042\001\001\000\006\022" +
    "\052\024\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\041\021" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\051\253\052\102\053" +
    "\106\054\105\001\001\000\002\001\001\000\012\051\252" +
    "\052\102\053\106\054\105\001\001\000\002\001\001\000" +
    "\010\052\246\053\106\054\105\001\001\000\002\001\001" +
    "\000\012\051\245\052\102\053\106\054\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\051\244\052\102" +
    "\053\106\054\105\001\001\000\002\001\001\000\046\017" +
    "\237\034\234\035\222\037\117\040\070\041\060\042\065" +
    "\043\056\044\063\045\062\046\076\047\104\050\054\051" +
    "\107\052\120\053\106\054\105\055\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\052\236\053\106\054\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\232\053\106\054\105\001\001\000\012\051\231\052\102" +
    "\053\106\054\105\001\001\000\012\051\230\052\102\053" +
    "\106\054\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\034\221\035\222\037\117\040\070" +
    "\041\060\042\065\043\056\044\063\045\062\046\076\047" +
    "\104\050\054\051\107\052\120\053\106\054\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\035\121\037\117\040\070\041\060\042\065\043\056" +
    "\044\063\045\062\046\076\047\104\050\054\051\107\052" +
    "\120\053\106\054\105\056\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\035\121\037\117\040\070\041\060\042\065\043\056\044" +
    "\063\045\062\046\076\047\104\050\054\051\107\052\120" +
    "\053\106\054\105\056\125\001\001\000\002\001\001\000" +
    "\040\035\153\037\117\040\070\041\060\042\065\043\056" +
    "\044\063\045\062\046\076\047\104\050\054\051\107\052" +
    "\120\053\106\054\105\001\001\000\040\035\152\037\117" +
    "\040\070\041\060\042\065\043\056\044\063\045\062\046" +
    "\076\047\104\050\054\051\107\052\120\053\106\054\105" +
    "\001\001\000\040\035\151\037\117\040\070\041\060\042" +
    "\065\043\056\044\063\045\062\046\076\047\104\050\054" +
    "\051\107\052\120\053\106\054\105\001\001\000\040\035" +
    "\150\037\117\040\070\041\060\042\065\043\056\044\063" +
    "\045\062\046\076\047\104\050\054\051\107\052\120\053" +
    "\106\054\105\001\001\000\040\035\147\037\117\040\070" +
    "\041\060\042\065\043\056\044\063\045\062\046\076\047" +
    "\104\050\054\051\107\052\120\053\106\054\105\001\001" +
    "\000\040\035\146\037\117\040\070\041\060\042\065\043" +
    "\056\044\063\045\062\046\076\047\104\050\054\051\107" +
    "\052\120\053\106\054\105\001\001\000\040\035\145\037" +
    "\117\040\070\041\060\042\065\043\056\044\063\045\062" +
    "\046\076\047\104\050\054\051\107\052\120\053\106\054" +
    "\105\001\001\000\040\035\144\037\117\040\070\041\060" +
    "\042\065\043\056\044\063\045\062\046\076\047\104\050" +
    "\054\051\107\052\120\053\106\054\105\001\001\000\040" +
    "\035\143\037\117\040\070\041\060\042\065\043\056\044" +
    "\063\045\062\046\076\047\104\050\054\051\107\052\120" +
    "\053\106\054\105\001\001\000\040\035\142\037\117\040" +
    "\070\041\060\042\065\043\056\044\063\045\062\046\076" +
    "\047\104\050\054\051\107\052\120\053\106\054\105\001" +
    "\001\000\040\035\141\037\117\040\070\041\060\042\065" +
    "\043\056\044\063\045\062\046\076\047\104\050\054\051" +
    "\107\052\120\053\106\054\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\040\155\041\060\042\065\043\056\044\063" +
    "\045\062\046\076\047\104\050\054\051\107\052\102\053" +
    "\106\054\105\001\001\000\002\001\001\000\032\041\157" +
    "\042\065\043\056\044\063\045\062\046\076\047\104\050" +
    "\054\051\107\052\102\053\106\054\105\001\001\000\002" +
    "\001\001\000\030\042\161\043\056\044\063\045\062\046" +
    "\076\047\104\050\054\051\107\052\102\053\106\054\105" +
    "\001\001\000\002\001\001\000\026\043\163\044\063\045" +
    "\062\046\076\047\104\050\054\051\107\052\102\053\106" +
    "\054\105\001\001\000\002\001\001\000\024\044\165\045" +
    "\062\046\076\047\104\050\054\051\107\052\102\053\106" +
    "\054\105\001\001\000\002\001\001\000\022\045\217\046" +
    "\076\047\104\050\054\051\107\052\102\053\106\054\105" +
    "\001\001\000\022\045\170\046\076\047\104\050\054\051" +
    "\107\052\102\053\106\054\105\001\001\000\002\001\001" +
    "\000\020\046\216\047\104\050\054\051\107\052\102\053" +
    "\106\054\105\001\001\000\020\046\215\047\104\050\054" +
    "\051\107\052\102\053\106\054\105\001\001\000\020\046" +
    "\214\047\104\050\054\051\107\052\102\053\106\054\105" +
    "\001\001\000\020\046\175\047\104\050\054\051\107\052" +
    "\102\053\106\054\105\001\001\000\002\001\001\000\016" +
    "\047\213\050\054\051\107\052\102\053\106\054\105\001" +
    "\001\000\016\047\200\050\054\051\107\052\102\053\106" +
    "\054\105\001\001\000\002\001\001\000\014\050\212\051" +
    "\107\052\102\053\106\054\105\001\001\000\014\050\203" +
    "\051\107\052\102\053\106\054\105\001\001\000\002\001" +
    "\001\000\012\051\211\052\102\053\106\054\105\001\001" +
    "\000\012\051\210\052\102\053\106\054\105\001\001\000" +
    "\012\051\207\052\102\053\106\054\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\034\224\035\222" +
    "\037\117\040\070\041\060\042\065\043\056\044\063\045" +
    "\062\046\076\047\104\050\054\051\107\052\120\053\106" +
    "\054\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\034\234\035" +
    "\222\037\117\040\070\041\060\042\065\043\056\044\063" +
    "\045\062\046\076\047\104\050\054\051\107\052\120\053" +
    "\106\054\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\051\243\052\102\053\106\054\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\017\237\034\234\035\222" +
    "\037\117\040\070\041\060\042\065\043\056\044\063\045" +
    "\062\046\076\047\104\050\054\051\107\052\120\053\106" +
    "\054\105\055\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\256\020\257\001\001\000\010\012\261\022" +
    "\026\024\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\256\020\263\001\001\000" +
    "\002\001\001\000\006\017\256\020\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\036\001\001\000\002" +
    "\001\001\000\042\015\276\035\277\037\117\040\070\041" +
    "\060\042\065\043\056\044\063\045\062\046\076\047\104" +
    "\050\054\051\107\052\120\053\106\054\105\001\001\000" +
    "\044\015\300\016\301\035\277\037\117\040\070\041\060" +
    "\042\065\043\056\044\063\045\062\046\076\047\104\050" +
    "\054\051\107\052\120\053\106\054\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\015\300\016\304\035\277" +
    "\037\117\040\070\041\060\042\065\043\056\044\063\045" +
    "\062\046\076\047\104\050\054\051\107\052\120\053\106" +
    "\054\105\001\001\000\002\001\001\000\010\011\307\017" +
    "\041\021\042\001\001\000\004\030\u0113\001\001\000\002" +
    "\001\001\000\004\030\u0112\001\001\000\006\017\041\021" +
    "\047\001\001\000\002\001\001\000\004\030\315\001\001" +
    "\000\004\060\316\001\001\000\002\001\001\000\014\004" +
    "\320\005\321\006\003\007\012\017\317\001\001\000\012" +
    "\013\267\014\271\022\273\024\025\001\001\000\060\025" +
    "\341\026\330\027\335\030\333\031\337\032\326\033\340" +
    "\034\336\035\222\037\117\040\070\041\060\042\065\043" +
    "\056\044\063\045\062\046\076\047\104\050\054\051\107" +
    "\052\120\053\106\054\105\001\001\000\014\004\322\005" +
    "\321\006\003\007\012\017\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\034\352\035\222\037\117\040\070\041\060\042\065\043" +
    "\056\044\063\045\062\046\076\047\104\050\054\051\107" +
    "\052\120\053\106\054\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\025" +
    "\341\026\342\027\335\030\333\031\337\032\326\033\340" +
    "\034\336\035\222\037\117\040\070\041\060\042\065\043" +
    "\056\044\063\045\062\046\076\047\104\050\054\051\107" +
    "\052\120\053\106\054\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\034\345\035\222\037\117\040\070" +
    "\041\060\042\065\043\056\044\063\045\062\046\076\047" +
    "\104\050\054\051\107\052\120\053\106\054\105\001\001" +
    "\000\002\001\001\000\056\025\347\027\335\030\333\031" +
    "\337\032\326\033\340\034\336\035\222\037\117\040\070" +
    "\041\060\042\065\043\056\044\063\045\062\046\076\047" +
    "\104\050\054\051\107\052\120\053\106\054\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\034\356\035\222\037\117\040\070\041\060\042\065\043" +
    "\056\044\063\045\062\046\076\047\104\050\054\051\107" +
    "\052\120\053\106\054\105\001\001\000\002\001\001\000" +
    "\056\025\360\027\335\030\333\031\337\032\326\033\340" +
    "\034\336\035\222\037\117\040\070\041\060\042\065\043" +
    "\056\044\063\045\062\046\076\047\104\050\054\051\107" +
    "\052\120\053\106\054\105\001\001\000\002\001\001\000" +
    "\056\025\362\027\335\030\333\031\337\032\326\033\340" +
    "\034\336\035\222\037\117\040\070\041\060\042\065\043" +
    "\056\044\063\045\062\046\076\047\104\050\054\051\107" +
    "\052\120\053\106\054\105\001\001\000\002\001\001\000" +
    "\042\034\365\035\222\037\117\040\070\041\060\042\065" +
    "\043\056\044\063\045\062\046\076\047\104\050\054\051" +
    "\107\052\120\053\106\054\105\001\001\000\042\034\u0105" +
    "\035\222\037\117\040\070\041\060\042\065\043\056\044" +
    "\063\045\062\046\076\047\104\050\054\051\107\052\120" +
    "\053\106\054\105\001\001\000\002\001\001\000\042\034" +
    "\370\035\222\037\117\040\070\041\060\042\065\043\056" +
    "\044\063\045\062\046\076\047\104\050\054\051\107\052" +
    "\120\053\106\054\105\001\001\000\042\034\377\035\222" +
    "\037\117\040\070\041\060\042\065\043\056\044\063\045" +
    "\062\046\076\047\104\050\054\051\107\052\120\053\106" +
    "\054\105\001\001\000\002\001\001\000\042\034\372\035" +
    "\222\037\117\040\070\041\060\042\065\043\056\044\063" +
    "\045\062\046\076\047\104\050\054\051\107\052\120\053" +
    "\106\054\105\001\001\000\002\001\001\000\056\025\374" +
    "\027\335\030\333\031\337\032\326\033\340\034\336\035" +
    "\222\037\117\040\070\041\060\042\065\043\056\044\063" +
    "\045\062\046\076\047\104\050\054\051\107\052\120\053" +
    "\106\054\105\001\001\000\002\001\001\000\056\025\376" +
    "\027\335\030\333\031\337\032\326\033\340\034\336\035" +
    "\222\037\117\040\070\041\060\042\065\043\056\044\063" +
    "\045\062\046\076\047\104\050\054\051\107\052\120\053" +
    "\106\054\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\025\u0101\027\335\030\333\031\337\032\326\033" +
    "\340\034\336\035\222\037\117\040\070\041\060\042\065" +
    "\043\056\044\063\045\062\046\076\047\104\050\054\051" +
    "\107\052\120\053\106\054\105\001\001\000\002\001\001" +
    "\000\056\025\u0103\027\335\030\333\031\337\032\326\033" +
    "\340\034\336\035\222\037\117\040\070\041\060\042\065" +
    "\043\056\044\063\045\062\046\076\047\104\050\054\051" +
    "\107\052\120\053\106\054\105\001\001\000\002\001\001" +
    "\000\042\034\u010c\035\222\037\117\040\070\041\060\042" +
    "\065\043\056\044\063\045\062\046\076\047\104\050\054" +
    "\051\107\052\120\053\106\054\105\001\001\000\002\001" +
    "\001\000\042\034\u0107\035\222\037\117\040\070\041\060" +
    "\042\065\043\056\044\063\045\062\046\076\047\104\050" +
    "\054\051\107\052\120\053\106\054\105\001\001\000\002" +
    "\001\001\000\056\025\u0109\027\335\030\333\031\337\032" +
    "\326\033\340\034\336\035\222\037\117\040\070\041\060" +
    "\042\065\043\056\044\063\045\062\046\076\047\104\050" +
    "\054\051\107\052\120\053\106\054\105\001\001\000\002" +
    "\001\001\000\056\025\u010b\027\335\030\333\031\337\032" +
    "\326\033\340\034\336\035\222\037\117\040\070\041\060" +
    "\042\065\043\056\044\063\045\062\046\076\047\104\050" +
    "\054\051\107\052\120\053\106\054\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\025\u010e\027\335\030" +
    "\333\031\337\032\326\033\340\034\336\035\222\037\117" +
    "\040\070\041\060\042\065\043\056\044\063\045\062\046" +
    "\076\047\104\050\054\051\107\052\120\053\106\054\105" +
    "\001\001\000\002\001\001\000\056\025\u0110\027\335\030" +
    "\333\031\337\032\326\033\340\034\336\035\222\037\117" +
    "\040\070\041\060\042\065\043\056\044\063\045\062\046" +
    "\076\047\104\050\054\051\107\052\120\053\106\054\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\u0115\014\271\022\273" +
    "\024\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\256\020\u0119\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\256\020\u011c\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("\tParsing error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

      if (s.left >= 0) {
        m.append(" in line " + (s.left +1 ));
        if (s.right >= 0) {
          m.append(", column " + (s.right + 1));
        }
      }
    }
    m.append(" : " + message);
    System.err.println(m);
  }

  public Parser(InputStream inp) {
    this(new Lexer(inp));
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  static compiler2013.symbol.Symbol symbol(String s) {
    return compiler2013.symbol.Symbol.getSymbol(s);
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // primexpr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // primexpr ::= CHARCONST 
            {
              Expr RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char ch = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharConst(ch); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // primexpr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConst(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // primexpr ::= NUM 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Num(n.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // primexpr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arguments ::= assignexpr COMMAR arguments 
            {
              Arguments RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int agsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int agsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arguments ags = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if (ags == null) RESULT = new Arguments(ae);
                else { ags.list.addFirst(ae); RESULT = ags; }
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arguments ::= assignexpr 
            {
              Arguments RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arguments(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arguments ::= 
            {
              Arguments RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // pfixexpr ::= primexpr 
            {
              Expr RESULT =null;
		int preleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int preright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pre = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pre; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // pfixexpr ::= pfixexpr LPAREN arguments RPAREN 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int agsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int agsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arguments ags = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallExpr(pfe, ags); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // pfixexpr ::= pfixexpr LBRAKET expr RBRAKET 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AdrsExpr(pfe, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // pfixexpr ::= pfixexpr PTR ID 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpr(pfe, symbol(i), PostfixExpr.PfType.PTR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // pfixexpr ::= pfixexpr DOT ID 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpr(pfe, symbol(i), PostfixExpr.PfType.DOT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // pfixexpr ::= pfixexpr DEC 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccExpr(AccExpr.AccType.DEC, pfe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // pfixexpr ::= pfixexpr INC 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccExpr(AccExpr.AccType.INC, pfe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unaryexpr ::= SIZEOF LPAREN typename RPAREN 
            {
              Expr RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeName ty = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSizeExpr(ty); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unaryexpr ::= SIZEOF unaryexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.SIZEOF, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unaryexpr ::= NOT castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.NOT, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unaryexpr ::= TIDLE castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.TIDLE, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unaryexpr ::= MINUS castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.MINUS, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unaryexpr ::= PLUS castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.PLUS, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unaryexpr ::= TIMES castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.TIMES, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unaryexpr ::= AND castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.AND, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unaryexpr ::= DEC unaryexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.DEC, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unaryexpr ::= INC unaryexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.INC, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unaryexpr ::= pfixexpr 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pfe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // typename ::= typespec 
            {
              TypeName RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SmpTypeName(ts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // typename ::= typename TIMES 
            {
              TypeName RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PtrTypeName(tn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // castexpr ::= LPAREN typename RPAREN castexpr 
            {
              Expr RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeName ty = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CastExpr(ty, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // castexpr ::= unaryexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // multiexpr ::= multiexpr MOD castexpr 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(me, ce, Op.OpType.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // multiexpr ::= multiexpr DIVIDE castexpr 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(me, ce, Op.OpType.DIVIDE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // multiexpr ::= multiexpr TIMES castexpr 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(me, ce, Op.OpType.TIMES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // multiexpr ::= castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ce; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // addexpr ::= addexpr MINUS multiexpr 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ae, me, Op.OpType.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addexpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // addexpr ::= addexpr PLUS multiexpr 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ae, me, Op.OpType.PLUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addexpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // addexpr ::= multiexpr 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = me; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addexpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // shiftexpr ::= shiftexpr SHR addexpr 
            {
              Expr RESULT =null;
		int sfteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sfteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr sfte = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int addeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr adde = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(sfte, adde, Op.OpType.SHR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // shiftexpr ::= shiftexpr SHL addexpr 
            {
              Expr RESULT =null;
		int sfteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sfteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr sfte = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int addeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr adde = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(sfte, adde, Op.OpType.SHL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // shiftexpr ::= addexpr 
            {
              Expr RESULT =null;
		int addeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr adde = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = adde; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relationexpr ::= relationexpr GE shiftexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(re, se, Op.OpType.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // relationexpr ::= relationexpr LE shiftexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(re, se, Op.OpType.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relationexpr ::= relationexpr GT shiftexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(re, se, Op.OpType.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relationexpr ::= relationexpr LT shiftexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(re, se, Op.OpType.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relationexpr ::= shiftexpr 
            {
              Expr RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = se; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // eqexpr ::= eqexpr NE relationexpr 
            {
              Expr RESULT =null;
		int eqeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eqeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr eqe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(eqe, re, Op.OpType.NE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqexpr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // eqexpr ::= eqexpr EQ relationexpr 
            {
              Expr RESULT =null;
		int eqeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eqeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr eqe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(eqe, re, Op.OpType.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqexpr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // eqexpr ::= relationexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = re; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqexpr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // andexpr ::= andexpr AND eqexpr 
            {
              Expr RESULT =null;
		int andeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int anderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eqeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr eqe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ande, eqe, Op.OpType.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andexpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // andexpr ::= eqexpr 
            {
              Expr RESULT =null;
		int eqeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr eqe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eqe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andexpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // xorexpr ::= xorexpr XOR andexpr 
            {
              Expr RESULT =null;
		int xoreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xoreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr xore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int andeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(xore, ande, Op.OpType.XOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xorexpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // xorexpr ::= andexpr 
            {
              Expr RESULT =null;
		int andeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ande; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xorexpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // orexpr ::= orexpr OR xorexpr 
            {
              Expr RESULT =null;
		int oreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xoreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xoreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr xore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ore, xore, Op.OpType.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("orexpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // orexpr ::= xorexpr 
            {
              Expr RESULT =null;
		int xoreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xoreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr xore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xore; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("orexpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parandexpr ::= parandexpr PARAAND orexpr 
            {
              Expr RESULT =null;
		int pandeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int panderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pande, ore, Op.OpType.PARAAND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parandexpr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parandexpr ::= orexpr 
            {
              Expr RESULT =null;
		int oreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ore; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parandexpr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parorexpr ::= parorexpr PARAOR parandexpr 
            {
              Expr RESULT =null;
		int poreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int poreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pandeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int panderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pore, pande, Op.OpType.PARAOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parorexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parorexpr ::= parandexpr 
            {
              Expr RESULT =null;
		int pandeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int panderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pande; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parorexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constexpr ::= parorexpr 
            {
              Expr RESULT =null;
		int poreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int poreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pore; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constexpr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignexpr ::= unaryexpr OR_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.OR_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignexpr ::= unaryexpr XOR_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.XOR_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignexpr ::= unaryexpr AND_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.AND_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignexpr ::= unaryexpr SHR_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.SHR_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignexpr ::= unaryexpr SHL_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.SHL_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignexpr ::= unaryexpr SUB_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.SUB_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignexpr ::= unaryexpr ADD_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.ADD_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignexpr ::= unaryexpr MOD_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.MOD_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignexpr ::= unaryexpr DIV_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.DIV_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignexpr ::= unaryexpr MUL_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.MUL_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignexpr ::= unaryexpr ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignexpr ::= parorexpr 
            {
              Expr RESULT =null;
		int poreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int poreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pore; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= assignexpr COMMAR expr 
            {
              Exprs RESULT =null;
		int aexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr aexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.list.addFirst(aexpr); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= assignexpr 
            {
              Exprs RESULT =null;
		int aexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr aexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exprs(aexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // jmpstmt ::= RETURN expr SEMICOLON 
            {
              JmpStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // jmpstmt ::= RETURN SEMICOLON 
            {
              JmpStmt RESULT =null;
		 RESULT = new ReturnStmt(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // jmpstmt ::= BREAK SEMICOLON 
            {
              JmpStmt RESULT =null;
		 RESULT = new BreakStmt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // jmpstmt ::= CONTINUE SEMICOLON 
            {
              JmpStmt RESULT =null;
		 RESULT = new ContinueStmt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // iterstmt ::= FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exprs ea = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exprs eb = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs ec = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(ea, eb, ec, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // iterstmt ::= FOR LPAREN SEMICOLON expr SEMICOLON expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exprs eb = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs ec = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(null, eb, ec, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // iterstmt ::= FOR LPAREN expr SEMICOLON SEMICOLON expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exprs ea = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs ec = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(ea, null, ec, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // iterstmt ::= FOR LPAREN expr SEMICOLON expr SEMICOLON RPAREN stmt 
            {
              IterStmt RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exprs ea = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exprs eb = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(ea, eb, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // iterstmt ::= FOR LPAREN SEMICOLON SEMICOLON expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(null, null, e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // iterstmt ::= FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt 
            {
              IterStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(null, e, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iterstmt ::= FOR LPAREN expr SEMICOLON SEMICOLON RPAREN stmt 
            {
              IterStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(e, null, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // iterstmt ::= FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt 
            {
              IterStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(null, null, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // iterstmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStmt(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // selstmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              SelStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt x = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SelStmt(e, s, x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selstmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // selstmt ::= IF LPAREN expr RPAREN stmt 
            {
              SelStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SelStmt(e, s, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selstmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cpdstmt ::= LBRACE NT$1 declars stmts RBRACE 
            {
              CpdStmt RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (CpdStmt) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declars ds = (Declars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ParserTest.endScope(); RESULT = new CpdStmt(ds, sts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cpdstmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$1 ::= 
            {
              CpdStmt RESULT =null;
 ParserTest.beginScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprstmt ::= expr SEMICOLON 
            {
              ExprStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExprStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprstmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprstmt ::= SEMICOLON 
            {
              ExprStmt RESULT =null;
		 RESULT = new ExprStmt(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprstmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (sts == null) RESULT = new Stmts(st);
            else { sts.list.addFirst(st); RESULT = sts; }
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmts ::= 
            {
              Stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= jmpstmt 
            {
              Stmt RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JmpStmt j = (JmpStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = j; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= iterstmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterStmt i = (IterStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= selstmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SelStmt s = (SelStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= cpdstmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CpdStmt c = (CpdStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= exprstmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pldecltor ::= TIMES pldecltor 
            {
              PlDecltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PtrPlDecltor(pdtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pldecltor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pldecltor ::= ID 
            {
              PlDecltor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SmpPlDecltor(symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pldecltor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arrparas ::= LBRAKET constexpr RBRAKET arrparas 
            {
              ArrParas RESULT =null;
		int cexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrParas aprs = (ArrParas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aprs.list.addFirst(cexpr); RESULT = aprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrparas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arrparas ::= LBRAKET constexpr RBRAKET 
            {
              ArrParas RESULT =null;
		int cexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr cexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrParas(cexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrparas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decltor ::= pldecltor arrparas 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrParas aprs = (ArrParas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrDecltor(pdtor, aprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // decltor ::= pldecltor 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SmpDecltor(pdtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decltor ::= pldecltor LPAREN RPAREN 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncDecltor(pdtor, null, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // decltor ::= pldecltor LPAREN para COMMAR ELLIPSIS RPAREN 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new FuncDecltor(pdtor, pr, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decltor ::= pldecltor LPAREN para RPAREN 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncDecltor(pdtor, pr, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pldecl ::= typespec decltor 
            {
              PlDecl RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlDecl(ty, dtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pldecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structdecls ::= typespec decltors SEMICOLON structdecls 
            {
              StructDecls RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decltors ds = (Decltors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 stds.adds(ty, ds); RESULT = stds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structdecls",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structdecls ::= typespec decltors SEMICOLON 
            {
              StructDecls RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decltors ds = (Decltors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructDecls(ty, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structdecls",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typespec ::= UNION LBRACE structdecls RBRACE 
            {
              Ty RESULT =null;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructTy(stds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // typespec ::= STRUCT LBRACE structdecls RBRACE 
            {
              Ty RESULT =null;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructTy(stds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // typespec ::= UNION ID LBRACE structdecls RBRACE 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnionTy(symbol(i), stds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // typespec ::= STRUCT ID LBRACE structdecls RBRACE 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructTy(symbol(i), stds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typespec ::= UNION ID 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnionTy(symbol(i), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // typespec ::= STRUCT ID 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = new StructTy(symbol(i), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typespec ::= TYPEID 
            {
              Ty RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NameTy(symbol(ti)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typespec ::= INT 
            {
              Ty RESULT =null;
		 RESULT = new NameTy(symbol("int")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typespec ::= CHAR 
            {
              Ty RESULT =null;
		 RESULT = new NameTy(symbol("char")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typespec ::= VOID 
            {
              Ty RESULT =null;
		 RESULT = new NameTy(symbol("void")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // initers ::= initer COMMAR initers 
            {
              Initers RESULT =null;
		int interleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int interright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Initer inter = (Initer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int intersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initers inters = (Initers)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 inters.list.addFirst(inter); RESULT = inters; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initers",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // initers ::= initer 
            {
              Initers RESULT =null;
		int interleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int interright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initer inter = (Initer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Initers(inter); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initers",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // initer ::= LBRACE initers RBRACE 
            {
              Initer RESULT =null;
		int intersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int intersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Initers inters = (Initers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CpdIniter(inters); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initer",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initer ::= assignexpr 
            {
              Initer RESULT =null;
		int aexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr aexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlIniter(aexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initer",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initdecltor ::= decltor ASSIGN initer 
            {
              InitDecltor RESULT =null;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initer iter = (Initer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecltor(dtor, iter); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecltor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initdecltor ::= decltor 
            {
              InitDecltor RESULT =null;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecltor(dtor, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecltor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // initdecltors ::= initdecltor COMMAR initdecltors 
            {
              InitDecltors RESULT =null;
		int idtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDecltor idtor = (InitDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idtorsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idtorsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDecltors idtors = (InitDecltors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idtors.list.addFirst(idtor); RESULT = idtors; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecltors",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // initdecltors ::= initdecltor 
            {
              InitDecltors RESULT =null;
		int idtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDecltor idtor = (InitDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecltors(idtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecltors",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decltors ::= decltor COMMAR decltors 
            {
              Decltors RESULT =null;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtorsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltors dtors = (Decltors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 dtors.list.addFirst(dtor); RESULT = dtors; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltors",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decltors ::= decltor 
            {
              Decltors RESULT =null;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decltors(dtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltors",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // para ::= para COMMAR pldecl 
            {
              Para RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlDecl pd = (PlDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pr.list.addLast(pd); RESULT = pr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("para",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // para ::= pldecl 
            {
              Para RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlDecl pd = (PlDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Para(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("para",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcdef ::= typespec pldecltor LPAREN para COMMAR ELLIPSIS RPAREN cpdstmt 
            {
              Func RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CpdStmt body = (CpdStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Func(ts, pdtor, pr, true, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcdef ::= typespec pldecltor LPAREN para RPAREN cpdstmt 
            {
              Func RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CpdStmt body = (CpdStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Func(ts, pdtor, pr, false, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcdef ::= typespec pldecltor LPAREN RPAREN cpdstmt 
            {
              Func RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CpdStmt body = (CpdStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Func(ts, pdtor, null, false, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vardecl ::= typespec initdecltors SEMICOLON 
            {
              VarDecl RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDecltors idtor = (InitDecltors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(ts, idtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vardecl ::= typespec SEMICOLON 
            {
              VarDecl RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(ts, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // typedecl ::= TYPEDEF typespec decltors NT$0 SEMICOLON 
            {
              TypeDecl RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (TypeDecl) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decltors dtor = (Decltors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              RESULT = new TypeDecl(ts, dtor);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              TypeDecl RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltors dtor = (Decltors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              for (int i = 0; i < dtor.list.size(); ++i) {
                PlDecltor pdtor = dtor.list.get(i).pldecltor;
                while (pdtor instanceof PtrPlDecltor) {
                  PtrPlDecltor cc = (PtrPlDecltor) pdtor;
                  pdtor = cc.pldecltor;
                }
                ParserTest.addTypeId(((SmpPlDecltor)pdtor).symbol.toString());
                //System.out.println(pdtor.symbol.toString());
              }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declar ::= vardecl 
            {
              Declar RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl vard = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vard; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declar ::= typedecl 
            {
              Declar RESULT =null;
		int typdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDecl typd = (TypeDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = typd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declars ::= declar declars 
            {
              Declars RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declar d = (Declar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declars ds = (Declars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              if (ds == null) RESULT = new Declars(d);
              else { ds.list.addFirst(d); RESULT = ds; }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declars",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declars ::= 
            {
              Declars RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declars",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= funcdef 
            {
              Decl RESULT =null;
		int fundleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fundright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Func fund = (Func)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fund; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl ::= declar 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declar d = (Declar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decls ::= decl decls 
            {
              Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls ds = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (ds == null) RESULT = new Decls(d);
            else { ds.list.addFirst(d); RESULT = ds; }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // decls ::= 
            {
              Decls RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= decls EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decls start_val = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

